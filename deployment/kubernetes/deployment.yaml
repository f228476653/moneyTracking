apiVersion: apps/v1
kind: Deployment
metadata:
  name: bank-parser-app
  labels:
    app: bank-parser
spec:
  replicas: 3
  selector:
    matchLabels:
      app: bank-parser
  template:
    metadata:
      labels:
        app: bank-parser
    spec:
      containers:
      - name: bank-parser
        image: bank-parser:latest
        ports:
        - containerPort: 8000
        env:
        - name: DEBUG
          value: "False"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: bank-parser-config
              key: db_host
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: bank-parser-config
              key: db_name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: bank-parser-secrets
              key: db_user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: bank-parser-secrets
              key: db_password
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: bank-parser-config
              key: db_port
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: bank-parser-secrets
              key: secret_key
        - name: ALLOWED_HOSTS
          valueFrom:
            configMapKeyRef:
              name: bank-parser-config
              key: allowed_hosts
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: media-storage
          mountPath: /app/media
        - name: static-storage
          mountPath: /app/staticfiles
      volumes:
      - name: media-storage
        persistentVolumeClaim:
          claimName: media-pvc
      - name: static-storage
        persistentVolumeClaim:
          claimName: static-pvc
      imagePullSecrets:
      - name: regcred
---
apiVersion: v1
kind: Service
metadata:
  name: bank-parser-service
  labels:
    app: bank-parser
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
  selector:
    app: bank-parser
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bank-parser-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - yourdomain.com
    secretName: bank-parser-tls
  rules:
  - host: yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: bank-parser-service
            port:
              number: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bank-parser-config
data:
  db_host: "postgres-service"
  db_name: "bank_parser"
  db_port: "5432"
  allowed_hosts: "yourdomain.com,www.yourdomain.com"
---
apiVersion: v1
kind: Secret
metadata:
  name: bank-parser-secrets
type: Opaque
data:
  db_user: cG9zdGdyZXM=  # base64 encoded "postgres"
  db_password: cG9zdGdyZXM=  # base64 encoded "postgres"
  secret_key: eW91ci1zZWNyZXQta2V5LWhlcmUtY2hhbmdlLWluLXByb2R1Y3Rpb24=  # base64 encoded "your-secret-key-here-change-in-production"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: media-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: static-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
